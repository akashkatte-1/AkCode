{"ast":null,"code":"// Programming languages\nexport const programmingLanguages = [{\n  id: 'javascript',\n  name: 'JavaScript',\n  extension: '.js'\n}, {\n  id: 'python',\n  name: 'Python',\n  extension: '.py'\n}, {\n  id: 'java',\n  name: 'Java',\n  extension: '.java'\n}, {\n  id: 'cpp',\n  name: 'C++',\n  extension: '.cpp'\n}, {\n  id: 'c',\n  name: 'C',\n  extension: '.c'\n}, {\n  id: 'csharp',\n  name: 'C#',\n  extension: '.cs'\n}, {\n  id: 'go',\n  name: 'Go',\n  extension: '.go'\n}, {\n  id: 'rust',\n  name: 'Rust',\n  extension: '.rs'\n}, {\n  id: 'php',\n  name: 'PHP',\n  extension: '.php'\n}, {\n  id: 'ruby',\n  name: 'Ruby',\n  extension: '.rb'\n}];\n\n// Enhanced code templates with proper structure\nexport const codeTemplates = {\n  javascript: `\n    // Write the javascript fu\n    \n    `.trim(),\n  python: `\n    # Read from stdin in Python\n    import sys\n    lines = sys.stdin.read().splitlines()\n    \n    # Example: parse input\n    nums = list(map(int, lines[0].split(',')))\n    target = int(lines[1])\n    \n    # Call your function and print output\n    print(two_sum(nums, target))\n    \n    def two_sum(nums, target):\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []\n    `.trim(),\n  java: `import java.util.*;\n\npublic class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Write your solution here\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if (map.containsKey(complement)) {\n                return new int[]{map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[]{};\n    }\n    \n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int[] result = sol.twoSum(new int[]{2, 7, 11, 15}, 9);\n        System.out.println(Arrays.toString(result));\n    }\n}`,\n  cpp: `#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        // Write your solution here\n        unordered_map<int, int> map;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (map.find(complement) != map.end()) {\n                return {map[complement], i};\n            }\n            map[nums[i]] = i;\n        }\n        return {};\n    }\n};\n\nint main() {\n    Solution sol;\n    vector<int> nums = {2, 7, 11, 15};\n    vector<int> result = sol.twoSum(nums, 9);\n    for (int i : result) {\n        cout << i << \" \";\n    }\n    return 0;\n}`,\n  c: `#include <stdio.h>\n#include <stdlib.h>\n\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    // Write your solution here\n    *returnSize = 2;\n    int* result = (int*)malloc(2 * sizeof(int));\n    \n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    \n    *returnSize = 0;\n    return result;\n}\n\nint main() {\n    int nums[] = {2, 7, 11, 15};\n    int target = 9;\n    int returnSize;\n    int* result = twoSum(nums, 4, target, &returnSize);\n    \n    printf(\"[%d, %d]\\\\n\", result[0], result[1]);\n    free(result);\n    return 0;\n}`,\n  csharp: `using System;\nusing System.Collections.Generic;\n\npublic class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        // Write your solution here\n        Dictionary<int, int> map = new Dictionary<int, int>();\n        for (int i = 0; i < nums.Length; i++) {\n            int complement = target - nums[i];\n            if (map.ContainsKey(complement)) {\n                return new int[] { map[complement], i };\n            }\n            map[nums[i]] = i;\n        }\n        return new int[] { };\n    }\n    \n    static void Main() {\n        Solution sol = new Solution();\n        int[] result = sol.TwoSum(new int[] {2, 7, 11, 15}, 9);\n        Console.WriteLine($\"[{result[0]}, {result[1]}]\");\n    }\n}`,\n  go: `package main\n\nimport \"fmt\"\n\nfunc twoSum(nums []int, target int) []int {\n    // Write your solution here\n    numMap := make(map[int]int)\n    for i, num := range nums {\n        complement := target - num\n        if j, exists := numMap[complement]; exists {\n            return []int{j, i}\n        }\n        numMap[num] = i\n    }\n    return []int{}\n}\n\nfunc main() {\n    result := twoSum([]int{2, 7, 11, 15}, 9)\n    fmt.Println(result)\n}`,\n  rust: `use std::collections::HashMap;\n\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        // Write your solution here\n        let mut map = HashMap::new();\n        for (i, &num) in nums.iter().enumerate() {\n            let complement = target - num;\n            if let Some(&j) = map.get(&complement) {\n                return vec![j as i32, i as i32];\n            }\n            map.insert(num, i);\n        }\n        vec![]\n    }\n}\n\nfn main() {\n    let result = Solution::two_sum(vec![2, 7, 11, 15], 9);\n    println!(\"{:?}\", result);\n}`,\n  php: `<?php\nclass Solution {\n    function twoSum($nums, $target) {\n        // Write your solution here\n        $map = array();\n        for ($i = 0; $i < count($nums); $i++) {\n            $complement = $target - $nums[$i];\n            if (array_key_exists($complement, $map)) {\n                return array($map[$complement], $i);\n            }\n            $map[$nums[$i]] = $i;\n        }\n        return array();\n    }\n}\n\n$sol = new Solution();\n$result = $sol->twoSum([2, 7, 11, 15], 9);\nprint_r($result);\n?>`,\n  ruby: `class Solution\n    def two_sum(nums, target)\n        # Write your solution here\n        map = {}\n        nums.each_with_index do |num, i|\n            complement = target - num\n            if map.key?(complement)\n                return [map[complement], i]\n            end\n            map[num] = i\n        end\n        []\n    end\nend\n\nsol = Solution.new\nresult = sol.two_sum([2, 7, 11, 15], 9)\nputs result.inspect`\n};","map":{"version":3,"names":["programmingLanguages","id","name","extension","codeTemplates","javascript","trim","python","java","cpp","c","csharp","go","rust","php","ruby"],"sources":["C:/Users/Vaishnavi1/Desktop/InternLab_internship/project/src/data/mockData.js"],"sourcesContent":["// Programming languages\r\nexport const programmingLanguages = [\r\n  { id: 'javascript', name: 'JavaScript', extension: '.js' },\r\n  { id: 'python', name: 'Python', extension: '.py' },\r\n  { id: 'java', name: 'Java', extension: '.java' },\r\n  { id: 'cpp', name: 'C++', extension: '.cpp' },\r\n  { id: 'c', name: 'C', extension: '.c' },\r\n  { id: 'csharp', name: 'C#', extension: '.cs' },\r\n  { id: 'go', name: 'Go', extension: '.go' },\r\n  { id: 'rust', name: 'Rust', extension: '.rs' },\r\n  { id: 'php', name: 'PHP', extension: '.php' },\r\n  { id: 'ruby', name: 'Ruby', extension: '.rb' }\r\n];\r\n\r\n// Enhanced code templates with proper structure\r\nexport const codeTemplates = {\r\n    javascript: `\r\n    // Write the javascript fu\r\n    \r\n    `.trim(),\r\n    \r\n      python: `\r\n    # Read from stdin in Python\r\n    import sys\r\n    lines = sys.stdin.read().splitlines()\r\n    \r\n    # Example: parse input\r\n    nums = list(map(int, lines[0].split(',')))\r\n    target = int(lines[1])\r\n    \r\n    # Call your function and print output\r\n    print(two_sum(nums, target))\r\n    \r\n    def two_sum(nums, target):\r\n        for i in range(len(nums)):\r\n            for j in range(i+1, len(nums)):\r\n                if nums[i] + nums[j] == target:\r\n                    return [i, j]\r\n        return []\r\n    `.trim(),\r\n  java: `import java.util.*;\r\n\r\npublic class Solution {\r\n    public int[] twoSum(int[] nums, int target) {\r\n        // Write your solution here\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        for (int i = 0; i < nums.length; i++) {\r\n            int complement = target - nums[i];\r\n            if (map.containsKey(complement)) {\r\n                return new int[]{map.get(complement), i};\r\n            }\r\n            map.put(nums[i], i);\r\n        }\r\n        return new int[]{};\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        Solution sol = new Solution();\r\n        int[] result = sol.twoSum(new int[]{2, 7, 11, 15}, 9);\r\n        System.out.println(Arrays.toString(result));\r\n    }\r\n}`,\r\n\r\n  cpp: `#include <iostream>\r\n#include <vector>\r\n#include <unordered_map>\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n    vector<int> twoSum(vector<int>& nums, int target) {\r\n        // Write your solution here\r\n        unordered_map<int, int> map;\r\n        for (int i = 0; i < nums.size(); i++) {\r\n            int complement = target - nums[i];\r\n            if (map.find(complement) != map.end()) {\r\n                return {map[complement], i};\r\n            }\r\n            map[nums[i]] = i;\r\n        }\r\n        return {};\r\n    }\r\n};\r\n\r\nint main() {\r\n    Solution sol;\r\n    vector<int> nums = {2, 7, 11, 15};\r\n    vector<int> result = sol.twoSum(nums, 9);\r\n    for (int i : result) {\r\n        cout << i << \" \";\r\n    }\r\n    return 0;\r\n}`,\r\n\r\n  c: `#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\r\n    // Write your solution here\r\n    *returnSize = 2;\r\n    int* result = (int*)malloc(2 * sizeof(int));\r\n    \r\n    for (int i = 0; i < numsSize; i++) {\r\n        for (int j = i + 1; j < numsSize; j++) {\r\n            if (nums[i] + nums[j] == target) {\r\n                result[0] = i;\r\n                result[1] = j;\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    \r\n    *returnSize = 0;\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    int nums[] = {2, 7, 11, 15};\r\n    int target = 9;\r\n    int returnSize;\r\n    int* result = twoSum(nums, 4, target, &returnSize);\r\n    \r\n    printf(\"[%d, %d]\\\\n\", result[0], result[1]);\r\n    free(result);\r\n    return 0;\r\n}`,\r\n\r\n  csharp: `using System;\r\nusing System.Collections.Generic;\r\n\r\npublic class Solution {\r\n    public int[] TwoSum(int[] nums, int target) {\r\n        // Write your solution here\r\n        Dictionary<int, int> map = new Dictionary<int, int>();\r\n        for (int i = 0; i < nums.Length; i++) {\r\n            int complement = target - nums[i];\r\n            if (map.ContainsKey(complement)) {\r\n                return new int[] { map[complement], i };\r\n            }\r\n            map[nums[i]] = i;\r\n        }\r\n        return new int[] { };\r\n    }\r\n    \r\n    static void Main() {\r\n        Solution sol = new Solution();\r\n        int[] result = sol.TwoSum(new int[] {2, 7, 11, 15}, 9);\r\n        Console.WriteLine($\"[{result[0]}, {result[1]}]\");\r\n    }\r\n}`,\r\n\r\n  go: `package main\r\n\r\nimport \"fmt\"\r\n\r\nfunc twoSum(nums []int, target int) []int {\r\n    // Write your solution here\r\n    numMap := make(map[int]int)\r\n    for i, num := range nums {\r\n        complement := target - num\r\n        if j, exists := numMap[complement]; exists {\r\n            return []int{j, i}\r\n        }\r\n        numMap[num] = i\r\n    }\r\n    return []int{}\r\n}\r\n\r\nfunc main() {\r\n    result := twoSum([]int{2, 7, 11, 15}, 9)\r\n    fmt.Println(result)\r\n}`,\r\n\r\n  rust: `use std::collections::HashMap;\r\n\r\nimpl Solution {\r\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\r\n        // Write your solution here\r\n        let mut map = HashMap::new();\r\n        for (i, &num) in nums.iter().enumerate() {\r\n            let complement = target - num;\r\n            if let Some(&j) = map.get(&complement) {\r\n                return vec![j as i32, i as i32];\r\n            }\r\n            map.insert(num, i);\r\n        }\r\n        vec![]\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let result = Solution::two_sum(vec![2, 7, 11, 15], 9);\r\n    println!(\"{:?}\", result);\r\n}`,\r\n\r\n  php: `<?php\r\nclass Solution {\r\n    function twoSum($nums, $target) {\r\n        // Write your solution here\r\n        $map = array();\r\n        for ($i = 0; $i < count($nums); $i++) {\r\n            $complement = $target - $nums[$i];\r\n            if (array_key_exists($complement, $map)) {\r\n                return array($map[$complement], $i);\r\n            }\r\n            $map[$nums[$i]] = $i;\r\n        }\r\n        return array();\r\n    }\r\n}\r\n\r\n$sol = new Solution();\r\n$result = $sol->twoSum([2, 7, 11, 15], 9);\r\nprint_r($result);\r\n?>`,\r\n\r\n  ruby: `class Solution\r\n    def two_sum(nums, target)\r\n        # Write your solution here\r\n        map = {}\r\n        nums.each_with_index do |num, i|\r\n            complement = target - num\r\n            if map.key?(complement)\r\n                return [map[complement], i]\r\n            end\r\n            map[num] = i\r\n        end\r\n        []\r\n    end\r\nend\r\n\r\nsol = Solution.new\r\nresult = sol.two_sum([2, 7, 11, 15], 9)\r\nputs result.inspect`\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAG,CAClC;EAAEC,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC1D;EAAEF,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAE;AAAM,CAAC,EAClD;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAQ,CAAC,EAChD;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAE;AAAO,CAAC,EAC7C;EAAEF,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,GAAG;EAAEC,SAAS,EAAE;AAAK,CAAC,EACvC;EAAEF,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC9C;EAAEF,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC1C;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC9C;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAE;AAAO,CAAC,EAC7C;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAM,CAAC,CAC/C;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAE;AAChB;AACA;AACA,KAAK,CAACC,IAAI,CAAC,CAAC;EAENC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAACD,IAAI,CAAC,CAAC;EACVE,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,GAAG,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,CAAC,EAAE;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,MAAM,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,EAAE,EAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,GAAG,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}