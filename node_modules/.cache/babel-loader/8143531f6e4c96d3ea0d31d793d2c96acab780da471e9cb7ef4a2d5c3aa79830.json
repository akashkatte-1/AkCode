{"ast":null,"code":"// Programming languages\nexport const programmingLanguages = [{\n  id: 'javascript',\n  name: 'JavaScript',\n  extension: '.js'\n}, {\n  id: 'python',\n  name: 'Python',\n  extension: '.py'\n}, {\n  id: 'java',\n  name: 'Java',\n  extension: '.java'\n}, {\n  id: 'cpp',\n  name: 'C++',\n  extension: '.cpp'\n}, {\n  id: 'c',\n  name: 'C',\n  extension: '.c'\n}, {\n  id: 'csharp',\n  name: 'C#',\n  extension: '.cs'\n}, {\n  id: 'go',\n  name: 'Go',\n  extension: '.go'\n}, {\n  id: 'rust',\n  name: 'Rust',\n  extension: '.rs'\n}, {\n  id: 'php',\n  name: 'PHP',\n  extension: '.php'\n}, {\n  id: 'ruby',\n  name: 'Ruby',\n  extension: '.rb'\n}];\n\n// Enhanced code templates with proper structure\nexport const codeTemplates = {\n  javascript: `\n    // Write the javascript function here (code in the form of function)\n    \n    `.trim(),\n  python: `\n    # Write the python function here (code in the form of function)\n    \n    `.trim(),\n  java: `\n   // Write the java function here (code in the form of function)\n  \n  `,\n  cpp: `\n  /*\n    Write the CPP function here (code in the form of function)\n\n    */\n  `,\n  c: `/*\n    Write the C function here (code in the form of function)\n\n    */`,\n  csharp: `/*\n    Write the Csharp function here (code in the form of function)\n\n    */`,\n  go: `/*\n    Write the Go function here (code in the form of function)\n\n    */`,\n  rust: `use std::collections::HashMap;\n\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        // Write your solution here\n        let mut map = HashMap::new();\n        for (i, &num) in nums.iter().enumerate() {\n            let complement = target - num;\n            if let Some(&j) = map.get(&complement) {\n                return vec![j as i32, i as i32];\n            }\n            map.insert(num, i);\n        }\n        vec![]\n    }\n}\n\nfn main() {\n    let result = Solution::two_sum(vec![2, 7, 11, 15], 9);\n    println!(\"{:?}\", result);\n}`,\n  php: `<?php\nclass Solution {\n    function twoSum($nums, $target) {\n        // Write your solution here\n        $map = array();\n        for ($i = 0; $i < count($nums); $i++) {\n            $complement = $target - $nums[$i];\n            if (array_key_exists($complement, $map)) {\n                return array($map[$complement], $i);\n            }\n            $map[$nums[$i]] = $i;\n        }\n        return array();\n    }\n}\n\n$sol = new Solution();\n$result = $sol->twoSum([2, 7, 11, 15], 9);\nprint_r($result);\n?>`,\n  ruby: `class Solution\n    def two_sum(nums, target)\n        # Write your solution here\n        map = {}\n        nums.each_with_index do |num, i|\n            complement = target - num\n            if map.key?(complement)\n                return [map[complement], i]\n            end\n            map[num] = i\n        end\n        []\n    end\nend\n\nsol = Solution.new\nresult = sol.two_sum([2, 7, 11, 15], 9)\nputs result.inspect`\n};","map":{"version":3,"names":["programmingLanguages","id","name","extension","codeTemplates","javascript","trim","python","java","cpp","c","csharp","go","rust","php","ruby"],"sources":["C:/Users/Vaishnavi1/Desktop/InternLab_internship/project/src/data/mockData.js"],"sourcesContent":["// Programming languages\r\nexport const programmingLanguages = [\r\n  { id: 'javascript', name: 'JavaScript', extension: '.js' },\r\n  { id: 'python', name: 'Python', extension: '.py' },\r\n  { id: 'java', name: 'Java', extension: '.java' },\r\n  { id: 'cpp', name: 'C++', extension: '.cpp' },\r\n  { id: 'c', name: 'C', extension: '.c' },\r\n  { id: 'csharp', name: 'C#', extension: '.cs' },\r\n  { id: 'go', name: 'Go', extension: '.go' },\r\n  { id: 'rust', name: 'Rust', extension: '.rs' },\r\n  { id: 'php', name: 'PHP', extension: '.php' },\r\n  { id: 'ruby', name: 'Ruby', extension: '.rb' }\r\n];\r\n\r\n// Enhanced code templates with proper structure\r\nexport const codeTemplates = {\r\n    javascript: `\r\n    // Write the javascript function here (code in the form of function)\r\n    \r\n    `.trim(),\r\n    \r\n      python: `\r\n    # Write the python function here (code in the form of function)\r\n    \r\n    `.trim(),\r\n  java: `\r\n   // Write the java function here (code in the form of function)\r\n  \r\n  `,\r\n\r\n  cpp: `\r\n  /*\r\n    Write the CPP function here (code in the form of function)\r\n\r\n    */\r\n  `,\r\n\r\n  c: `/*\r\n    Write the C function here (code in the form of function)\r\n\r\n    */`,\r\n\r\n  csharp: `/*\r\n    Write the Csharp function here (code in the form of function)\r\n\r\n    */`,\r\n\r\n  go: `/*\r\n    Write the Go function here (code in the form of function)\r\n\r\n    */`,\r\n\r\n  rust: `use std::collections::HashMap;\r\n\r\nimpl Solution {\r\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\r\n        // Write your solution here\r\n        let mut map = HashMap::new();\r\n        for (i, &num) in nums.iter().enumerate() {\r\n            let complement = target - num;\r\n            if let Some(&j) = map.get(&complement) {\r\n                return vec![j as i32, i as i32];\r\n            }\r\n            map.insert(num, i);\r\n        }\r\n        vec![]\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let result = Solution::two_sum(vec![2, 7, 11, 15], 9);\r\n    println!(\"{:?}\", result);\r\n}`,\r\n\r\n  php: `<?php\r\nclass Solution {\r\n    function twoSum($nums, $target) {\r\n        // Write your solution here\r\n        $map = array();\r\n        for ($i = 0; $i < count($nums); $i++) {\r\n            $complement = $target - $nums[$i];\r\n            if (array_key_exists($complement, $map)) {\r\n                return array($map[$complement], $i);\r\n            }\r\n            $map[$nums[$i]] = $i;\r\n        }\r\n        return array();\r\n    }\r\n}\r\n\r\n$sol = new Solution();\r\n$result = $sol->twoSum([2, 7, 11, 15], 9);\r\nprint_r($result);\r\n?>`,\r\n\r\n  ruby: `class Solution\r\n    def two_sum(nums, target)\r\n        # Write your solution here\r\n        map = {}\r\n        nums.each_with_index do |num, i|\r\n            complement = target - num\r\n            if map.key?(complement)\r\n                return [map[complement], i]\r\n            end\r\n            map[num] = i\r\n        end\r\n        []\r\n    end\r\nend\r\n\r\nsol = Solution.new\r\nresult = sol.two_sum([2, 7, 11, 15], 9)\r\nputs result.inspect`\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,oBAAoB,GAAG,CAClC;EAAEC,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE,YAAY;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC1D;EAAEF,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,QAAQ;EAAEC,SAAS,EAAE;AAAM,CAAC,EAClD;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAQ,CAAC,EAChD;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAE;AAAO,CAAC,EAC7C;EAAEF,EAAE,EAAE,GAAG;EAAEC,IAAI,EAAE,GAAG;EAAEC,SAAS,EAAE;AAAK,CAAC,EACvC;EAAEF,EAAE,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC9C;EAAEF,EAAE,EAAE,IAAI;EAAEC,IAAI,EAAE,IAAI;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC1C;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAM,CAAC,EAC9C;EAAEF,EAAE,EAAE,KAAK;EAAEC,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAE;AAAO,CAAC,EAC7C;EAAEF,EAAE,EAAE,MAAM;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAE;AAAM,CAAC,CAC/C;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EACzBC,UAAU,EAAE;AAChB;AACA;AACA,KAAK,CAACC,IAAI,CAAC,CAAC;EAENC,MAAM,EAAE;AACd;AACA;AACA,KAAK,CAACD,IAAI,CAAC,CAAC;EACVE,IAAI,EAAE;AACR;AACA;AACA,GAAG;EAEDC,GAAG,EAAE;AACP;AACA;AACA;AACA;AACA,GAAG;EAEDC,CAAC,EAAE;AACL;AACA;AACA,OAAO;EAELC,MAAM,EAAE;AACV;AACA;AACA,OAAO;EAELC,EAAE,EAAE;AACN;AACA;AACA,OAAO;EAELC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;EAEAC,GAAG,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDC,IAAI,EAAE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}