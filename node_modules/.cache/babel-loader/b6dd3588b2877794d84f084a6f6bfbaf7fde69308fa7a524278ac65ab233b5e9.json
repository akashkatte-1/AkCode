{"ast":null,"code":"export const programmingLanguages = {\n  javascript: 'JavaScript',\n  python: 'Python',\n  java: 'Java',\n  cpp: 'C++',\n  c: 'C',\n  csharp: 'C#',\n  go: 'Go',\n  rust: 'Rust',\n  php: 'PHP',\n  ruby: 'Ruby'\n};\nexport const codeTemplates = {\n  javascript: `function myFunction(your number of arguments) {\n  return ;\n}`,\n  python: `def my_function(your number of arguments):\n    return `,\n  java: `public class Solution {\n  public static int myFunction(your number of arguments) {\n    return ;\n  }\n}`,\n  cpp: `int myFunction(int a, int b) {\n  return ;\n}`,\n  c: `int myFunction(int a, int b) {\n  return ;\n}`,\n  csharp: `public class Solution {\n  public static int MyFunction(int a, int b) {\n    return ;\n  }\n}`,\n  go: `package main\nimport \"fmt\"\nfunc myFunction(a int, b int) int {\n  return \n}`,\n  rust: `fn my_function(a: i32, b: i32) -> i32 {\n  \n}`,\n  php: `<?php\nfunction myFunction($a, $b) {\n  return ;\n}`,\n  ruby: `def my_function(a, b)\n  \nend`\n};","map":{"version":3,"names":["programmingLanguages","javascript","python","java","cpp","c","csharp","go","rust","php","ruby","codeTemplates"],"sources":["C:/Users/Vaishnavi1/Desktop/InternLab_internship/project/src/data/mockData.js"],"sourcesContent":["export const programmingLanguages = {\r\n  javascript: 'JavaScript',\r\n  python: 'Python',\r\n  java: 'Java',\r\n  cpp: 'C++',\r\n  c: 'C',\r\n  csharp: 'C#',\r\n  go: 'Go',\r\n  rust: 'Rust',\r\n  php: 'PHP',\r\n  ruby: 'Ruby'\r\n};\r\n\r\nexport const codeTemplates = {\r\n  javascript: `function myFunction(your number of arguments) {\r\n  return ;\r\n}`,\r\n  python: `def my_function(your number of arguments):\r\n    return `,\r\n  java: `public class Solution {\r\n  public static int myFunction(your number of arguments) {\r\n    return ;\r\n  }\r\n}`,\r\n  cpp: `int myFunction(int a, int b) {\r\n  return ;\r\n}`,\r\n  c: `int myFunction(int a, int b) {\r\n  return ;\r\n}`,\r\n  csharp: `public class Solution {\r\n  public static int MyFunction(int a, int b) {\r\n    return ;\r\n  }\r\n}`,\r\n  go: `package main\r\nimport \"fmt\"\r\nfunc myFunction(a int, b int) int {\r\n  return \r\n}`,\r\n  rust: `fn my_function(a: i32, b: i32) -> i32 {\r\n  \r\n}`,\r\n  php: `<?php\r\nfunction myFunction($a, $b) {\r\n  return ;\r\n}`,\r\n  ruby: `def my_function(a, b)\r\n  \r\nend`\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAG;EAClCC,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,MAAM;EACZC,GAAG,EAAE,KAAK;EACVC,CAAC,EAAE,GAAG;EACNC,MAAM,EAAE,IAAI;EACZC,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,MAAM;EACZC,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG;EAC3BV,UAAU,EAAE;AACd;AACA,EAAE;EACAC,MAAM,EAAE;AACV,YAAY;EACVC,IAAI,EAAE;AACR;AACA;AACA;AACA,EAAE;EACAC,GAAG,EAAE;AACP;AACA,EAAE;EACAC,CAAC,EAAE;AACL;AACA,EAAE;EACAC,MAAM,EAAE;AACV;AACA;AACA;AACA,EAAE;EACAC,EAAE,EAAE;AACN;AACA;AACA;AACA,EAAE;EACAC,IAAI,EAAE;AACR;AACA,EAAE;EACAC,GAAG,EAAE;AACP;AACA;AACA,EAAE;EACAC,IAAI,EAAE;AACR;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}